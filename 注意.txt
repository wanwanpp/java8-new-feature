1.java8中允许接口实现方法，而不只是简单的声明，这种方法就是默认方法，使用default关键字
    还可以定义静态方法及实现，如同在类中一样定义
2.函数式接口指的是只定义了唯一抽象方法的接口。
3.函数式接口代表一种契约，一种对某个特定函数类型的契约，在它出现的地方，实际期望一个符合契约要求的函数。
    lambda表达式不能脱离上下文而存在，否则编译器不能进行推断出参数类型，以及返回结果类型，它必须要有
    一个明确的目标类型，这个目标类型就是某个函数式接口。
4.Predicate -- 传入一个参数，返回一个bool结果， 方法为boolean test(T t)
  Consumer -- 传入一个参数，无返回值，纯消费。 方法为void accept(T t)
  Function -- 传入一个参数，返回一个结果，方法为R apply(T t)
  Supplier -- 无参数传入，返回一个结果，方法为T get()
  UnaryOperator -- 一元操作符， 继承Function,传入参数的类型和返回类型相同。
  BinaryOperator -- 二元操作符， 传入的两个参数的类型和返回类型相同， 继承BiFunction

5.Consumer与Function的区别主要是Consumer没有返回值，Function有返回值,包括void也有其包装类型作为返回值类型。
6.Function<Integer,Integer> function参数就是使用lambda定义的一个处理过程，就是一个函数。
  传入一个参数，应用某些规则，返回一个结果。至于是什么规则，一般是使用lambda表达式定义。
7.一个方法接受声明Runable，Comparable或者Callable接口，都有单个抽象方法，可以传入lambda表达式。
    类似的，如果一个方法接受声明与java.util.function包内的接口，例如Predicate，Supplier，Consumer，Function，
    则可以向其传入lambda表达式
8.lambda内部可以使用静态，非静态和局部变量，这成为lambda内的变量捕获.
9.lambda在java中又称为闭包或者匿名函数。
10.不能在lambda内部修改定义在外部的变量，只能对其进行访问。
11.stream代表了来自某个源的对象的序列。
    （1）元素序列：Stream以序列的形式提供了特定类型的元素的集合。根据需求，它可以获得和计算元素，但不会储存任何元素。
    （2）源：Stream可以将集合、数组和I/O资源作为输入源。
    （3）聚集操作：Stream支持诸如filter、map、limit、reduce等的聚集操作。
    （4）流水技术：许多Stream操作返回了流本身，故它们的返回值可以以流水的行式存在。这些操作称之为中间操作，并且它们的功能就是负责输入、处理和向目标输出。collect()方法是一个终结操作，通常存在于流水线操作的末端，来标记流的结束。
    （5）自动跌代：Stream的操作可以基于已提供的源元素进行内部的迭代，而集合则需要显式的迭代。
12.java8中有以下3中类型的base64编解码
    简易模式：输出是完全按照A-Za-z0-9+/字符集映射的。编码不会自己增加输出行，解码器也不会接受任何超出A-Za-z0-9+/范围的内容。
    URL模式：输出基于A-Za-z0-9+/的映射，但对于URL和文件名是安全的。
    MIME模式：输出对于MIME类型的内容是友好的。如果超过76个字符，则会换行输出。，并且换行符\n之后会自动添加一个\r。如果某行没有\r则说明输出的内容已经结束。
